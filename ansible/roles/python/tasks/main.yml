---
# Runs a python script in a tmux session
#
# The script's parameters must be specified in a variable called arguments. It
# should be the actual argument line as-is, with the exception that per-host
# arguments should be "variables" like "output" below:
# {"arguments": "-i input -o $output"}
# The values of all "variables" must be given in a separate dict,
# "per_host_args":
# {"per_host_args": {"output": "output_prefix"}}

# Some checks first

# First check if all required variables exist.
- fail:
    msg: "The {{ pvar }} variable must exist."
  when: pvar not in vars
  loop: "{{ 'python_script,log_file,processes'.split(',') }}"
  loop_control:
    loop_var: pvar
# Also check if the name of the log file is valid.
# Having a log file is very important, as that's the only output we will ever
# get.
- fail:
    msg: The name of the log file must either end with '.log' or it must be /dev/null
  when: not (log_file|regex_search('.log$') or log_file == '/dev/null')

# Now we can do the argument setup...
- name: initializing arguments...
  set_fact:
    full_argument_line: "{{ arguments|default('') }}"
- name: replace values in the arguments
  set_fact:
    full_argument_line: " {{ full_argument_line | replace('$' + item.key, item.value|distribute(inventory_hostname)) }}"
  loop: "{{ per_host_args|default({})|dict2items }}"
- name: setting up the log file
  set_fact:
    per_host_log_file: "{{ log_file|distribute(inventory_hostname) }}"
- name: upload the tmuxp configuration template
  template:
    src: tmuxp.yml.j2
    dest: "{{ github_repo_dir }}/ansible/tmuxp.yml"
- name: start the tmux session
  shell: "{{ virtualenv_dir }}/bin/tmuxp load -d {{ github_repo_dir }}/ansible/tmuxp.yml"

# Task that kills the running tmux sessions. Use if you want to stop
# script execution.
- name: kill the tmux session
  shell: "tmux kill-session -t {{ tmux_session_name }}"
  tags:
    - never
    - kill_tmux
